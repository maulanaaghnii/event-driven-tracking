@{
    ViewData["Title"] = "Home Page";
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Tracker GPS - .NET 8</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- MapLibre & Deck.gl CDN -->
    <script src="https://unpkg.com/deck.gl@latest/dist.min.js"></script>
    <script src="https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.js"></script>
    <link href="https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.css" rel="stylesheet" />
    <style>
      body { margin: 0; overflow: hidden; }
      #map { position: absolute; top: 0; bottom: 0; width: 100%; }
      .moving-marker {
        width: 40px;
        height: 40px;
        background-image: url('/sample-icon.png');
        background-size: contain;
        background-repeat: no-repeat;
        cursor: pointer;
        transition: transform 0.3s ease-out;
        filter: drop-shadow(0 0 5px rgba(0,0,0,0.5));
        position: relative;
      }
      .moving-marker:hover {
        transform: scale(1.2);
      }
      .marker-label {
        position: absolute;
        top: -85px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 12px;
        white-space: nowrap;
        pointer-events: none;
        z-index: 1;
      }
      .marker-line {
        position: absolute;
        top: -85px;
        left: 50%;
        width: 4px;
        height: 100px;
        background: linear-gradient(to bottom, 
          rgb(0, 0, 0) 0%,
          rgb(0, 0, 0) 40%,
          rgb(0, 0, 0) 40%,
          rgb(0, 0, 0) 100%
        );
        transform: translateX(-50%);
        pointer-events: none;
      }
      .search-container {
        position: fixed;
        top: 32px;
        left: 48px;
        z-index: 1000;
        width: 270px;
        font-family: 'Segoe UI', Arial, sans-serif;
        transition: transform 0.3s ease;
      }
      
      .search-container.hidden {
        transform: translateX(-320px);
      }
      
      .search-toggle {
        position: absolute;
        right: -50px;
        top: 0;
        width: 40px;
        height: 44px;
        background: rgba(20,20,30,0.65);
        border: 2px solid #1976d2;
        @* border-left: none; *@
        border-radius: 14px 14px 14px 14px;
        color: #90caf9;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 8px #1976d211;
        transition: background 0.18s, box-shadow 0.18s, border-radius 0.18s;
        margin-left: 8px;
        z-index: 2;
      }
      .search-toggle svg {
        width: 18px;
        height: 18px;
        display: block;
        fill: #90caf9;
        transition: transform 0.2s, fill 0.2s;
      }
      .search-toggle:hover {
        background: rgba(25,118,210,0.13);
        box-shadow: 0 4px 16px #1976d233;
      }
      
      .search-input-container {
        position: relative;
        display: flex;
        align-items: center;
        height: 44px;
      }
      
      .search-icon {
        position: absolute;
        left: 16px;
        color: #90caf9;
        font-size: 18px;
      }
      
      .search-input {
        width: 100%;
        padding: 12px 16px 12px 45px;
        border: 2px solid #1976d2;
        border-radius: 16px;
        background: rgba(20,20,30,0.85);
        color: #fff;
        font-size: 16px;
        box-shadow: 0 4px 24px rgba(25,118,210,0.18);
        outline: none;
        transition: all 0.2s;
        backdrop-filter: blur(8px);
        height: 44px;
      }
      
      .search-input:focus {
        background: rgba(20,20,30,0.95);
        box-shadow: 0 6px 32px rgba(25,118,210,0.25);
      }
      
      .search-input::placeholder {
        color: #90caf9;
        opacity: 1;
      }
      
      .unit-list {
        margin-top: 6px;
        max-height: 320px;
        overflow-y: auto;
        background: rgba(20,20,30,0.85);
        border: 2px solid #1976d2;
        border-radius: 16px;
        box-shadow: 0 4px 24px rgba(25,118,210,0.18);
        padding: 6px 0;
        animation: fadeInDropdown 0.18s;
        display: none;
        backdrop-filter: blur(8px);
      }
      .unit-list.show {
        display: block;
      }
      @@keyframes fadeInDropdown {
        from { opacity: 0; transform: translateY(-8px);}
        to   { opacity: 1; transform: translateY(0);}
      }
      .unit-item {
        padding: 12px 18px;
        color: #fff;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 15px;
        border: none;
        background: none;
        transition: background 0.15s, color 0.15s;
        border-radius: 8px;
        margin: 0 6px;
      }
      .unit-item:hover, .unit-item.active {
        background: linear-gradient(90deg, #1976d2 0%, #64b5f6 100%);
        color: #fff;
      }
      .unit-status {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 6px;
        box-shadow: 0 0 4px #0002;
        border: 2px solid #fff;
      }
      /* Custom scrollbar untuk unit list */
      .unit-list::-webkit-scrollbar {
        width: 8px;
      }
      .unit-list::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 4px;
      }
      .unit-list::-webkit-scrollbar-thumb {
        background: rgba(25, 118, 210, 0.5);
        border-radius: 4px;
      }
      .unit-list::-webkit-scrollbar-thumb:hover {
        background: rgba(25, 118, 210, 0.7);
      }
      #total-unit-info {
        position: fixed;
        left: 32px;
        bottom: 32px;
        z-index: 1001;
        background: rgba(20,20,30,0.85);
        color: #90caf9;
        border: 2px solid #1976d2;
        border-radius: 14px;
        padding: 16px 24px;
        font-size: 16px;
        font-family: 'Segoe UI', Arial, sans-serif;
        box-shadow: 0 4px 24px rgba(25,118,210,0.18);
        min-width: 120px;
        text-align: left;
      }

      .toggle-container {
        position: fixed;
        right: 75px;
        bottom: 32px;
        z-index: 1001;
        background: rgba(20,20,30,0.85);
        color: #90caf9;
        border: 2px solid #1976d2;
        border-radius: 14px;
        padding: 16px 24px;
        font-size: 12px;
        font-family: 'Segoe UI', Arial, sans-serif;
        box-shadow: 0 4px 24px rgba(25,118,210,0.18);
        display: flex;
        flex-direction: column;
        gap: 12px;
        transition: all 0.3s ease;
        backdrop-filter: blur(8px);
      }

      .toggle-container.hidden {
        transform: translateX(calc(100% + 8px));
        opacity: 0;
      }

      .toggle-container input[type="checkbox"] {
        width: 12px;
        height: 12px;
        cursor: pointer;
        accent-color: #1976d2;
      }

      .toggle-container label {
        cursor: pointer;
        user-select: none;
      }

      .toggle-item {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .toggle-button {
        position: fixed;
        right: 32px;
        bottom: 32px;
        z-index: 1002;
        width: 36px;
        height: 36px;
        background: rgba(20,20,30,0.85);
        border: 2px solid #1976d2;
        border-radius: 12px;
        color: #90caf9;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 4px 24px rgba(25,118,210,0.18);
        transition: all 0.3s ease;
        backdrop-filter: blur(8px);
      }

      .toggle-button:hover {
        background: rgba(25,118,210,0.13);
        transform: scale(1.05);
      }

      .toggle-button svg {
        width: 18px;
        height: 18px;
        fill: #90caf9;
        transition: transform 0.3s ease;
      }

      .toggle-container.hidden + .toggle-button svg {
        transform: rotate(180deg);
      }

      .toggle-container.hidden + .toggle-button {
        border-radius: 50%;
      }
    </style>
</head>
<body>
    <div id="map"></div>
    
    <!-- Search Container -->
    <div class="search-container hidden">
      <div class="search-input-container">
        <span class="search-icon">🔍</span>
        <input type="text" 
               class="search-input" 
               placeholder="Search unit..." 
               id="unit-search">
      </div>
      <button class="search-toggle" id="search-toggle" aria-label="Show/hide search">
        <svg fill="#000000" width="800px" height="800px" viewBox="0 -0.24 28.423 28.423" id="_02_-_Search_Button" data-name="02 - Search Button" xmlns="http://www.w3.org/2000/svg">
          <path id="Path_215" data-name="Path 215" d="M14.953,2.547A12.643,12.643,0,1,0,27.6,15.19,12.649,12.649,0,0,0,14.953,2.547Zm0,2A10.643,10.643,0,1,1,4.31,15.19,10.648,10.648,0,0,1,14.953,4.547Z" transform="translate(-2.31 -2.547)" fill-rule="evenodd"/>
          <path id="Path_216" data-name="Path 216" d="M30.441,28.789l-6.276-6.276a1,1,0,1,0-1.414,1.414L29.027,30.2a1,1,0,1,0,1.414-1.414Z" transform="translate(-2.31 -2.547)" fill-rule="evenodd"/>
        </svg>
      </button>
      <div class="unit-list" id="unit-list"></div>
    </div>

    <div id="popup-info" style="display:none; position:fixed; top:80px; right:40px; z-index:1000; background:rgba(20,20,30,0.85); border:2px solid #1976d2; border-radius:16px; padding:20px 24px 20px 20px; min-width:240px; box-shadow:0 4px 24px rgba(25,118,210,0.18); font-family:sans-serif; color:#fff; backdrop-filter: blur(8px);">
      <button id="popup-close" style="position:absolute; top:8px; right:8px; background:transparent; border:none; font-size:20px; color:#90caf9; cursor:pointer;">&times;</button>
      <div style="display:flex; align-items:center; gap:12px; margin-bottom:10px;">
        @* <img src="/icon.svg" alt="Truck" style="width:32px; height:32px;"> *@
        <div style="font-weight:bold; font-size:18px; color:#90caf9;">Info Unit</div>
      </div>
      <div id="popup-content"></div>
    </div>
    @* <button id="clear-cache" style="position:fixed; top:20px; right:20px; z-index:1000; background:#1976d2; color:white; border:none; padding:10px 20px; border-radius:8px; cursor:pointer; font-family:sans-serif;">Clear Cache</button> *@
    <div id="total-unit-info"></div>
    <div class="toggle-container hidden">
      <div class="toggle-item">
        <input type="checkbox" id="cluster-toggle">
        <label for="cluster-toggle">Show Clusters</label>
      </div>
      <div class="toggle-item">
        <input type="checkbox" id="geofence-toggle" checked>
        <label for="geofence-toggle">Show Geofencing</label>
      </div>
    </div>
    <button class="toggle-button" id="toggle-button" aria-label="Toggle settings">
      <svg viewBox="0 0 24 24" style="transform: rotate(180deg);">
        <path d="M9.29 6.71a1 1 0 0 1 1.42 0l4 4a1 1 0 0 1 0 1.42l-4 4a1 1 0 1 1-1.42-1.42L12.59 12l-3.3-3.29a1 1 0 0 1 0-1.42z"/>
      </svg>
    </button>
    <script>
      const INITIAL_VIEW_STATE = {
        longitude: 117.5,
        latitude: 2.2,
        zoom: 9,
        pitch: 60,
        bearing: -20,
        maxZoom: 20,
        minZoom: 4,
        maxBounds: [
          [117.0, 1.8],
          [118.0, 2.7]
        ]
      };
      const markers = {};
      const latestGpsData = {};
      let popupUnit = null;
      const markerStates = {}; // Untuk menyimpan state animasi tiap marker
      let unitList = []; // Tambahkan ini untuk menyimpan list unit
      let wsConnection = null;

      // Debounce function
      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }

      // Throttle function
      function throttle(func, limit) {
        let inThrottle;
        return function executedFunction(...args) {
          if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
          }
        };
      }

      // Optimized marker visibility update
      const updateMarkerVisibility = throttle(() => {
        const features = map.querySourceFeatures('moving-markers', {
          sourceLayer: undefined,
          filter: ['!', ['has', 'point_count']]
        });
        const visibleUnits = new Set(features.map(f => f.properties.unitno));
        Object.keys(markers).forEach(unitno => {
          if (visibleUnits.has(unitno)) {
            markers[unitno].setOpacity(1);
          } else {
            markers[unitno].setOpacity(0);
          }
        });
      }, 100);

      // Optimized search input handler
      const handleSearchInput = debounce((e) => {
        updateUnitList(e.target.value);
      }, 300);

      function updateUnitList(filter = '') {
        const unitListElement = document.getElementById('unit-list');
        const units = Object.keys(latestGpsData).length > 0 ? 
          Object.keys(latestGpsData) : 
          unitList;
          
        unitListElement.innerHTML = '';
        
        const filteredUnits = units.filter(unit => 
          unit.toLowerCase().includes(filter.toLowerCase())
        );
        
        if (filteredUnits.length > 0) {
          filteredUnits.forEach(unit => {
            const div = document.createElement('div');
            div.className = 'unit-item';
            
            // Status indicator
            const status = document.createElement('span');
            status.className = 'unit-status';
            
            // Cek status dari latestGpsData jika ada
            const data = latestGpsData[unit];
            if (data) {
              if (data.status === 'on' || data.status === true) {
                status.style.background = '#43a047';
              } else if (data.status === 'off' || data.status === false) {
                status.style.background = '#e53935';
              } else {
                status.style.background = '#43a047';
              }
            } else {
              status.style.background = '#fbc02d'; // Default kuning jika belum ada data
            }
            
            div.appendChild(status);
            div.appendChild(document.createTextNode(unit));
            
            // Add hover effect
            div.onmouseenter = () => div.classList.add('active');
            div.onmouseleave = () => div.classList.remove('active');
            
            div.onclick = () => {
              const marker = markers[unit];
              if (marker) {
                const coord = marker.getLngLat();
                map.flyTo({
                  center: [coord.lng, coord.lat],
                  zoom: Math.max(map.getZoom(), 18),
                  duration: 2000
                });
                popupUnit = unit;
                showPopup(coord.lng, coord.lat, unit);
                unitListElement.classList.remove('show');
                document.getElementById('unit-search').value = '';
              }
            };
            
            unitListElement.appendChild(div);
          });
          unitListElement.classList.add('show');
        } else {
          // Show "No units found" message
          const emptyDiv = document.createElement('div');
          emptyDiv.className = 'unit-item';
          emptyDiv.style.color = '#90caf9';
          emptyDiv.textContent = 'No units found';
          unitListElement.appendChild(emptyDiv);
          unitListElement.classList.add('show');
        }
      }

      // Tambahkan fungsi untuk search
      function setupSearch() {
        const searchInput = document.getElementById('unit-search');
        const unitListElement = document.getElementById('unit-list');
        const searchContainer = document.querySelector('.search-container');
        const searchToggle = document.getElementById('search-toggle');
        
        // Toggle search visibility
        searchToggle.onclick = () => {
          searchContainer.classList.toggle('hidden');
          const chevron = document.getElementById('chevron-toggle');
          if (chevron) {
            if (searchContainer.classList.contains('hidden')) {
              chevron.style.transform = 'rotate(180deg)';
              chevron.style.fill = '#1976d2';
            } else {
              chevron.style.transform = 'rotate(0deg)';
              chevron.style.fill = '#90caf9';
            }
          }
        };
        
        // Event listeners
        searchInput.addEventListener('focus', () => {
          updateUnitList('');
        });
        
        searchInput.addEventListener('input', handleSearchInput);
        
        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
          if (!searchInput.contains(e.target) && !unitListElement.contains(e.target)) {
            unitListElement.classList.remove('show');
          }
        });
      }

      function connectWebSocket() {
        wsConnection = new WebSocket('ws://localhost:5000/gpsHub');
        
        wsConnection.onopen = function() {
          console.log('WebSocket connection established');
        };
        
        wsConnection.onmessage = function(event) {
          const dataArray = JSON.parse(event.data);
          
          dataArray.forEach(data => {
            if (data.UnitNo && data.Lat !== undefined && data.Lon !== undefined) {
              const lat = parseFloat(data.Lat);
              const lng = parseFloat(data.Lon);

              // Validasi lat/lon
              if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {
                console.warn(`Skip unit ${data.UnitNo} karena lat/lon tidak valid:`, lat, lng);
                return; // skip unit ini
              }

              // Tambahkan unit ke list jika belum ada
              if (!unitList.includes(data.UnitNo)) {
                unitList.push(data.UnitNo);
                updateTotalUnitInfo();
              }

              updateMarker(
                data.UnitNo,
                lat,
                lng,
                data.GeoMaxSpeed,
                data.VehicleSpeed,
                data.DeviceId,
                data.Status
              );
              latestGpsData[data.UnitNo] = {
                lat: data.Lat,
                lng: data.Lon,
                geomaxspeed: data.GeoMaxSpeed,
                vehiclespeed: data.VehicleSpeed,
                deviceid: data.DeviceId,
                status: data.Status
              };
              
              // Update popup if this is the currently selected unit
              if (popupUnit === data.UnitNo) {
                showPopup(data.Lon, data.Lat, data.UnitNo);
              }
            }
          });
        };
        
        wsConnection.onerror = function(error) {
          console.error('WebSocket error:', error);
        };
        
        wsConnection.onclose = function() {
          console.log('WebSocket connection closed');
          // Coba reconnect setelah 5 detik
          setTimeout(connectWebSocket, 5000);
        };
      }

      function createMarkerElement(unitno, vehiclespeed) {
        const container = document.createElement('div');
        container.className = 'marker-container';
        const markerElement = document.createElement('div');
        markerElement.className = 'moving-marker';
        
        // Atur icon sesuai vehiclespeed
        let iconUrl = '/icon-normal.svg';
        if (vehiclespeed < 5) {
          iconUrl = '/icon-idle.svg';
        } else if (vehiclespeed > 25) {
          iconUrl = '/icon-overspeed.svg';
        }
        markerElement.style.backgroundImage = `url('${iconUrl}')`;
        
        const statusCircle = document.createElement('div');
        statusCircle.className = 'marker-status-circle';
        statusCircle.style.position = 'absolute';
        statusCircle.style.top = '2px';
        statusCircle.style.right = '2px';
        statusCircle.style.width = '18px';
        statusCircle.style.height = '18px';
        statusCircle.style.borderRadius = '50%';
        statusCircle.style.border = '3px solid #fff';
        statusCircle.style.background = '#ccc';
        statusCircle.style.zIndex = '2';
        
        markerElement.appendChild(statusCircle);
        
        const label = document.createElement('div');
        label.className = 'marker-label';
        label.textContent = unitno;

        const line = document.createElement('div');
        line.className = 'marker-line';
        
        container.appendChild(markerElement);
        container.appendChild(line);
        container.appendChild(label);
        container.dataset.unitno = unitno;
        container.statusCircle = statusCircle;

        // Fungsi untuk menampilkan popup
        function displayPopup() {
          const marker = markers[unitno];
          if (!marker) return;
          
          const coord = marker.getLngLat();
          const popup = document.getElementById('popup-info');
          const content = document.getElementById('popup-content');
          const gps = latestGpsData[unitno] || { lat: coord.lat, lng: coord.lng };
          
          content.innerHTML = `
            <div style="margin-bottom:4px"><span style="color:#bbb">Unit: </span><span style="color:#90caf9;font-weight:bold">${unitno}</span></div>
            <div style="margin-bottom:4px"><span style="color:#bbb">GPS Lat: </span><span style="color:#90caf9;font-weight:bold">${gps.lat}</span></div>
            <div style="margin-bottom:4px"><span style="color:#bbb">GPS Long: </span><span style="color:#90caf9;font-weight:bold">${gps.lng}</span></div>
            <div style="margin-bottom:4px"><span style="color:#bbb">GeoMaxSpeed: </span><span style="color:#90caf9;font-weight:bold">${gps.geomaxspeed !== undefined ? gps.geomaxspeed : '-'}</span></div>
            <div style="margin-bottom:4px"><span style="color:#bbb">Vehiclespeed: </span><span style="color:#90caf9;font-weight:bold">${gps.vehiclespeed !== undefined ? gps.vehiclespeed : '-'}</span></div>
          `;
          
          popup.style.display = 'block';
          popupUnit = unitno;
        }

        // Event click handler
        container.onclick = function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const marker = markers[unitno];
          if (!marker) return;
          
          const coord = marker.getLngLat();
          
          // Tampilkan popup langsung
          showPopup(coord.lng, coord.lat, unitno);
          
          // Fly to lokasi dengan animasi yang lebih halus
          map.flyTo({
            center: [coord.lng, coord.lat],
            zoom: Math.max(map.getZoom(), 18),
            duration: 2000,
            essential: true,
            curve: 1.5,
            speed: 1.2
          });

          // Mulai tracking marker
          startTrackingMarker(unitno);
        };

        return container;
      }
      function updateMarker(unitno, lat, lng, geomaxspeed, vehiclespeed, deviceid, status) {
        if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
          console.error(`Invalid coordinates for unit ${unitno}: ${lat}, ${lng}`);
          return;
        }

        // Update GeoJSON source untuk clustering
        const source = map.getSource('moving-markers');
        if (source) {
          const features = source.serialize().data.features || [];
          const existingFeatureIndex = features.findIndex(f => f.properties.unitno === unitno);

          const newFeature = {
            type: 'Feature',
            properties: {
              unitno: unitno,
              geomaxspeed: geomaxspeed,
              vehiclespeed: vehiclespeed,
              deviceid: deviceid,
              status: status
            },
            geometry: {
              type: 'Point',
              coordinates: [lng, lat]
            }
          };

          if (existingFeatureIndex !== -1) {
            features[existingFeatureIndex] = newFeature;
          } else {
            features.push(newFeature);
          }

          source.setData({
            type: 'FeatureCollection',
            features: features
          });
        }

        // Update marker visual
        if (!markers[unitno]) {
          const markerElement = createMarkerElement(unitno, vehiclespeed);
          markers[unitno] = new maplibregl.Marker({
            element: markerElement,
            anchor: 'bottom'
          }).setLngLat([lng, lat]).addTo(map);
          markerStates[unitno] = { current: [lng, lat], target: [lng, lat], animating: false };
        } else {
          const state = markerStates[unitno] || { current: [lng, lat], target: [lng, lat], animating: false };
          
          // Jika marker sedang bergerak, update target dengan interpolasi yang lebih halus
          if (state.animating) {
            const [currentLng, currentLat] = state.current;
            const [targetLng, targetLat] = state.target;
            
            // Interpolasi yang lebih halus untuk target baru
            const newLng = currentLng + (targetLng - currentLng) * 0.2;
            const newLat = currentLat + (targetLat - currentLat) * 0.2;
            
            state.target = [newLng, newLat];
          } else {
            state.target = [lng, lat];
            animateMarker(unitno, state);
          }
          
          markerStates[unitno] = state;
          
          // Update icon jika vehiclespeed berubah
          const markerContainer = markers[unitno].getElement();
          let iconUrl = '/icon-normal.svg';
          if (vehiclespeed < 5) {
            iconUrl = '/icon-idle.svg';
          } else if (vehiclespeed > 25) {
            iconUrl = '/icon-overspeed.svg';
          }
          markerContainer.querySelector('.moving-marker').style.backgroundImage = `url('${iconUrl}')`;
        }

        // Update status circle color
        const markerContainer = markers[unitno].getElement();
        const statusCircle = markerContainer.statusCircle;
        if (statusCircle) {
          if (status === 'on' || status === true) {
            statusCircle.style.background = '#43a047';
          } else if (status === 'off' || status === false) {
            statusCircle.style.background = '#e53935';
          } else if (status === 'unknown') {
            statusCircle.style.background = '#fbc02d';
          } else {
            statusCircle.style.background = '#43a047';
          }
        }
        updateMarkerVisibility();
      }
      const map = new maplibregl.Map({
        container: 'map',
        style: {
          version: 8,
          glyphs: 'https://fonts.openmaptiles.org/{fontstack}/{range}.pbf',
          sources: {
            'google-satellite': {
              type: 'raster',
              tiles: [
                'https://mt1.google.com/vt/lyrs=s&x={x}&y={y}&z={z}'
              ],
              tileSize: 256
            }
          },
          layers: [{
            id: 'google-satellite-layer',
            type: 'raster',
            source: 'google-satellite',
            paint: {}
          }]
        },
        center: [INITIAL_VIEW_STATE.longitude, INITIAL_VIEW_STATE.latitude],
        zoom: INITIAL_VIEW_STATE.zoom,
        pitch: INITIAL_VIEW_STATE.pitch,
        bearing: INITIAL_VIEW_STATE.bearing,
        minZoom: INITIAL_VIEW_STATE.minZoom,
        maxZoom: INITIAL_VIEW_STATE.maxZoom,
        maxBounds: INITIAL_VIEW_STATE.maxBounds,
        interactive: true,
        dragPan: {
          inertia: 0.3,
          linearity: 0.1,
          sensitivity: 0.5
        },
        dragRotate: {
          inertia: 0.3,
          sensitivity: 1
        }
      });
      @* let unitList = ['DT3894']; *@
      // Initialize WebSocket connection after map loads
      map.on('load', () => {
        setupSearch();
        connectWebSocket();
        updateTotalUnitInfo();

        // Load GeoJSON dengan fetch
        fetch('/api/geojson')
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            console.log('GeoJSON loaded successfully:', data); // Debug log
            map.addSource('geojson-source', {
              type: 'geojson',
              data: data
            });

            // Tambahkan layer dengan styling yang lebih baik
            map.addLayer({
              id: 'geojson-layer',
              type: 'fill',
              source: 'geojson-source',
              paint: {
                'fill-color': '#1976d2',
                'fill-opacity': 0.3,
                'fill-outline-color': '#1976d2'
              }
            });

            // Tambahkan hover effect
            map.on('mouseenter', 'geojson-layer', () => {
              map.getCanvas().style.cursor = 'pointer';
            });

            map.on('mouseleave', 'geojson-layer', () => {
              map.getCanvas().style.cursor = '';
            });

            // Tambahkan click event
            map.on('click', 'geojson-layer', (e) => {
              const coordinates = e.lngLat;
              const properties = e.features[0].properties;
              
              // Tampilkan popup dengan informasi area
              new maplibregl.Popup()
                .setLngLat(coordinates)
                .setHTML(`
                  <h6>Area Information</h6>
                  <h3>${properties.name || 'Unnamed Area'}</h3>
                  <p style="margin-top: 8px; color: #666;">${properties.description || 'No description available'}</p>
                `)
                .addTo(map);
            });
          })
          .catch(error => {
            console.error('Error loading GeoJSON:', error);
          });
      });

      // Cleanup on page unload
      window.addEventListener('unload', () => {
        if (wsConnection) {
          wsConnection.close();
        }
        Object.values(markers).forEach(marker => marker.remove());
      });

      function updateTotalUnitInfo() {
        const total = unitList.length;
        // Hitung unit aktif dan tidak aktif berdasarkan latestGpsData
        let aktif = 0;
        let tidakAktif = 0;
        unitList.forEach(unit => {
          const data = latestGpsData[unit];
          if (data) {
            if (data.status === 'on' || data.status === true) {
              aktif++;
            } else if (data.status === 'off' || data.status === false) {
              tidakAktif++;
            }
          }
        });
        document.getElementById('total-unit-info').innerHTML = `Total Unit: ${total}<br>Active: ${aktif}<br>Inactive: ${tidakAktif}`;
      }

      // Tambahkan event click pada map untuk menutup popup
      map.on('click', (e) => {
        // Jika klik bukan pada marker, tutup popup
        if (!e.originalEvent.target.closest('.marker-container')) {
          document.getElementById('popup-info').style.display = 'none';
          popupUnit = null;
        }
      });

      // Tambahkan event listener untuk checkbox geofencing
      const geofenceToggle = document.getElementById('geofence-toggle');
      geofenceToggle.addEventListener('change', function() {
        const isGeofenceEnabled = this.checked;
        
        // Toggle visibility layer geofence
        if (map.getLayer('geojson-layer')) {
          map.setLayoutProperty('geojson-layer', 'visibility', isGeofenceEnabled ? 'visible' : 'none');
        }
      });

      // Tambahkan event listener untuk toggle button
      const toggleButton = document.getElementById('toggle-button');
      const toggleContainer = document.querySelector('.toggle-container');
      
      toggleButton.addEventListener('click', function() {
        toggleContainer.classList.toggle('hidden');
      });

      // Fungsi untuk menampilkan popup info
      function showPopup(lng, lat, unitno) {
        const popup = document.getElementById('popup-info');
        const content = document.getElementById('popup-content');
        
        // Clear any existing update interval
        if (window.popupUpdateInterval) {
          clearInterval(window.popupUpdateInterval);
        }
        
        function updatePopupContent() {
          const gps = latestGpsData[unitno] || { lat, lng };
          
          // Using DocumentFragment for better performance
          const fragment = document.createDocumentFragment();
          
          // Create elements instead of using innerHTML
          const createInfoRow = (label, value) => {
            const div = document.createElement('div');
            div.style.marginBottom = '4px';
            
            const labelSpan = document.createElement('span');
            labelSpan.style.color = '#bbb';
            labelSpan.textContent = label + ': ';
            
            const valueSpan = document.createElement('span');
            valueSpan.style.color = '#90caf9';
            valueSpan.style.fontWeight = 'bold';
            valueSpan.textContent = value;
            
            div.appendChild(labelSpan);
            div.appendChild(valueSpan);
            return div;
          };

          fragment.appendChild(createInfoRow('Unit', unitno));
          fragment.appendChild(createInfoRow('GPS Lat', gps.lat));
          fragment.appendChild(createInfoRow('GPS Long', gps.lng));
          fragment.appendChild(createInfoRow('GeoMaxSpeed', gps.geomaxspeed !== undefined ? gps.geomaxspeed : '-'));
          fragment.appendChild(createInfoRow('Vehiclespeed', gps.vehiclespeed !== undefined ? gps.vehiclespeed : '-'));

          // Clear and append new content
          content.textContent = '';
          content.appendChild(fragment);
        }

        // Initial update
        updatePopupContent();
        
        // Set up interval for real-time updates
        window.popupUpdateInterval = setInterval(updatePopupContent, 1000);
        
        // Pastikan popup ditampilkan
        popup.style.display = 'block';
        popup.style.opacity = '1';
        popup.style.visibility = 'visible';
      }

      // Fungsi untuk tracking marker
      function startTrackingMarker(unitno) {
        // Hapus tracking yang ada sebelumnya
        if (window.trackingInterval) {
          clearInterval(window.trackingInterval);
        }

        // Mulai tracking baru
        window.trackingInterval = setInterval(() => {
          const marker = markers[unitno];
          if (marker) {
            const coord = marker.getLngLat();
            map.flyTo({
              center: [coord.lng, coord.lat],
              zoom: map.getZoom(),
              duration: 1000,
              essential: true
            });
          }
        }, 1000); // Update setiap 1 detik
      }

      // Hentikan tracking ketika popup ditutup
      document.getElementById('popup-close').onclick = function() {
        document.getElementById('popup-info').style.display = 'none';
        popupUnit = null;
        if (window.trackingInterval) {
          clearInterval(window.trackingInterval);
        }
        // Clear popup update interval when closing
        if (window.popupUpdateInterval) {
          clearInterval(window.popupUpdateInterval);
        }
      };

      // Tambahkan source untuk marker yang bergerak
      map.on('load', () => {
        map.addSource('moving-markers', {
          type: 'geojson',
          data: {
            type: 'FeatureCollection',
            features: []
          },
          cluster: false,
          clusterMaxZoom: 16,
          clusterRadius: 100
        });

        // Layer untuk single point
        map.addLayer({
          id: 'moving-points',
          type: 'circle',
          source: 'moving-markers',
          filter: ['!', ['has', 'point_count']],
          paint: {
            'circle-opacity': 0 // Atau atur sesuai kebutuhan
          }
        });

        // Tambahkan layer untuk cluster (circle)
        map.addLayer({
          id: 'clusters',
          type: 'circle',
          source: 'moving-markers',
          filter: ['has', 'point_count'],
          paint: {
            'circle-color': [
              'step',
              ['get', 'point_count'],
              '#000000', 10, '#43a047', 30, '#e53935'
            ],
            'circle-radius': [
              'step',
              ['get', 'point_count'],
              22, 10, 28, 30, 36
            ],
            'circle-opacity': 0.85,
            'circle-stroke-color': '#1976d2',
            'circle-stroke-width': 4
          }
        });

        // Layer untuk angka jumlah unit di cluster
        map.addLayer({
          id: 'cluster-count',
          type: 'symbol',
          source: 'moving-markers',
          filter: ['has', 'point_count'],
          layout: {
            'text-field': ['get', 'point_count'],
            'text-size': 16,
            'text-font': ['Open Sans Regular'],
            'text-ignore-placement': true,
            'text-allow-overlap': true,
            'text-anchor': 'center',
            'text-offset': [0, 0]
          },
          paint: {
            'text-color': '#ffffff'
          }
        });

        // Tambahkan event listener untuk checkbox clustering
        const clusterToggle = document.getElementById('cluster-toggle');
        clusterToggle.addEventListener('change', function() {
          const isClusteringEnabled = this.checked;
          
          // Hapus source dan layer yang ada
          if (map.getLayer('clusters')) map.removeLayer('clusters');
          if (map.getLayer('cluster-count')) map.removeLayer('cluster-count');
          if (map.getLayer('moving-points')) map.removeLayer('moving-points');
          if (map.getSource('moving-markers')) map.removeSource('moving-markers');

          // Buat source baru dengan konfigurasi clustering yang sesuai
          map.addSource('moving-markers', {
            type: 'geojson',
            data: {
              type: 'FeatureCollection',
              features: []
            },
            cluster: isClusteringEnabled,
            clusterMaxZoom: 16,
            clusterRadius: 100
          });

          // Tambahkan layer untuk single point
          map.addLayer({
            id: 'moving-points',
            type: 'circle',
            source: 'moving-markers',
            filter: ['!', ['has', 'point_count']],
            paint: {
              'circle-opacity': 0
            }
          });

          // Tambahkan layer cluster jika clustering diaktifkan
          if (isClusteringEnabled) {
            map.addLayer({
              id: 'clusters',
              type: 'circle',
              source: 'moving-markers',
              filter: ['has', 'point_count'],
              paint: {
                'circle-color': [
                  'step',
                  ['get', 'point_count'],
                  '#000000', 10, '#43a047', 30, '#e53935'
                ],
                'circle-radius': [
                  'step',
                  ['get', 'point_count'],
                  22, 10, 28, 30, 36
                ],
                'circle-opacity': 0.85,
                'circle-stroke-color': '#1976d2',
                'circle-stroke-width': 4
              }
            });

            map.addLayer({
              id: 'cluster-count',
              type: 'symbol',
              source: 'moving-markers',
              filter: ['has', 'point_count'],
              layout: {
                'text-field': ['get', 'point_count'],
                'text-size': 16,
                'text-font': ['Open Sans Regular'],
                'text-ignore-placement': true,
                'text-allow-overlap': true,
                'text-anchor': 'center',
                'text-offset': [0, 0]
              },
              paint: {
                'text-color': '#ffffff'
              }
            });
          }

          // Update marker visibility
          updateMarkerVisibility();
        });

        // Tambahkan event listener untuk zoom dengan animasi
        map.on('zoom', () => {
          const currentZoom = map.getZoom();
          // Tampilkan/sembunyikan marker dengan animasi opacity
          Object.keys(markers).forEach(unitno => {
            const marker = markers[unitno];
            marker.getElement().style.transition = 'opacity 0.3s ease';
            marker.setOpacity(1); // Selalu tampilkan marker
          });

          // Lepaskan pemilihan unit jika zoom level terlalu kecil
          if (currentZoom < 15 && popupUnit !== null) {
            document.getElementById('popup-info').style.display = 'none';
            popupUnit = null;
          }
        });

        map.on('click', 'clusters', function (e) {
          var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
          var cluster = features[0];
          console.log(cluster); // cek di console
          var count = cluster.properties.point_count;
          new maplibregl.Popup()
            .setLngLat(cluster.geometry.coordinates)
            .setHTML(`<b>${count} unit</b> di area ini`)
            .addTo(map);
        });

        map.on('zoom', updateMarkerVisibility);
      });

      // Fungsi animasi smooth tanpa rotasi
      function animateMarker(unitno, state) {
        state.animating = true;
        const marker = markers[unitno];
        const [startLng, startLat] = state.current;
        const [endLng, endLat] = state.target;
        
        // Hitung jarak untuk menentukan durasi
        const distance = Math.sqrt(
          Math.pow(endLng - startLng, 2) + 
          Math.pow(endLat - startLat, 2)
        );
        
        // Durasi berdasarkan jarak dan kecepatan
        const baseDuration = 2000; // Durasi dasar 2 detik
        const speedFactor = 0.3; // Faktor kecepatan yang lebih lambat
        const duration = Math.min(Math.max(distance * baseDuration * speedFactor, 1000), 4000);
        
        const startTime = performance.now();
        let lastFrameTime = startTime;
        let lastPosition = { lng: startLng, lat: startLat };

        function easeInOutQuad(t) {
          return t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;
        }

        function interpolatePosition(start, end, progress) {
          return {
            lng: start.lng + (end.lng - start.lng) * progress,
            lat: start.lat + (end.lat - start.lat) * progress
          };
        }

        function step(now) {
          const elapsed = now - startTime;
          const deltaTime = now - lastFrameTime;
          lastFrameTime = now;
          
          const t = Math.min(elapsed / duration, 1);
          const ease = easeInOutQuad(t);
          
          // Interpolasi posisi dengan easing
          const currentPosition = interpolatePosition(
            { lng: startLng, lat: startLat },
            { lng: endLng, lat: endLat },
            ease
          );
          
          // Update posisi marker
          marker.setLngLat([currentPosition.lng, currentPosition.lat]);
          
          lastPosition = currentPosition;
          
          if (t < 1) {
            requestAnimationFrame(step);
          } else {
            state.current = [endLng, endLat];
            state.animating = false;
          }
        }
        
        requestAnimationFrame(step);
      }
    </script>
</body>
</html>